{"version":3,"sources":["components/screens/Card/index.jsx","components/screens/Buttons/index.jsx","components/screens/Home/index.jsx","components/screens/Edit/index.js","components/screens/Index/index.jsx","components/screens/Count/index.jsx","components/screens/ListCounts/index.jsx","components/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","Avatar","name","year","Buttons","status","Button","variant","color","onClick","b1","to","Home","this","React","Component","Edit","FormControl","InputLabel","htmlFor","Input","id","defaultValue","onChange","setName","setYear","saveValue","Index","changeScreen","setState","state","saveValues","swal","console","log","e","target","value","Date","date","validate","Count","decrement","newValue","count","newDate","increment","d","toLocaleString","IconButton","aria-label","style","fontSize","delete","ListCounts","addCount","countID","copyCountsArray","Object","assign","countsArray","push","deleteCount","index","splice","number","startIcon","size","map","key","bind","App","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.63119cbe.chunk.js","sourcesContent":["import './styles.css';\r\nimport React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\n\r\nconst Card = (props) => (\r\n    <>\r\n        <div className=\"containerCard\">\r\n            <Avatar>\r\n                <FolderIcon/>\r\n            </Avatar>\r\n            <p>{props.name}</p>\r\n            <p>{props.year}</p>\r\n        </div>\r\n    </>\r\n)\r\n\r\nexport default Card;","import './styles.css';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst Buttons = (props) => {\r\n    return (\r\n        <div className=\"containerButtons\">\r\n            {\r\n                props.status ?\r\n                    <>\r\n                        <Button \r\n                            variant=\"contained\" \r\n                            color=\"secondary\"\r\n                            onClick={props.onClick}\r\n                        >\r\n                            {props.b1}\r\n                        </Button>\r\n                        <Button \r\n                            variant=\"contained\" \r\n                            color=\"primary\"\r\n                        >\r\n                            <Link to=\"/counters\">LISTA CONTADORES</Link>\r\n                        </Button>\r\n                    </> : <>\r\n                    <Button \r\n                            variant=\"contained\" \r\n                            color=\"secondary\"\r\n                            onClick={props.onClick}\r\n                        >\r\n                            {props.b1}\r\n                        </Button>\r\n                        <Button \r\n                            variant=\"contained\" \r\n                            color=\"primary\"\r\n                        >\r\n                            <Link to=\"/counters\">LISTA CONTADORES</Link>\r\n                        </Button>\r\n                    </>\r\n            }\r\n        </div >                                     \r\n    )\r\n}\r\n\r\nexport default Buttons;","import './styles.css';\r\nimport React from 'react';\r\nimport Card from '../Card/index';\r\nimport Buttons from '../Buttons/index';\r\n\r\nclass Home extends React.Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"containerHome\">\r\n                <div className=\"card\">\r\n                    <Card\r\n                        name={this.props.name}\r\n                        year={this.props.year}\r\n                        status={this.props.status}\r\n                    />\r\n                    <Buttons\r\n                        b1={'Editar Informacion'}\r\n                        name={this.props.name}\r\n                        year={this.props.year}\r\n                        status={this.props.status}\r\n                        onClick={this.props.onClick}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import './styles.css';\r\nimport React from 'react';\r\nimport Buttons from '../Buttons/index';\r\nimport FilledInput from '@material-ui/core/FilledInput';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nclass Edit extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"containerHome\">\r\n                    <div className=\"card\">\r\n                        <div className=\"inputsCard\">\r\n                            <form>\r\n                                <FormControl>\r\n                                    <InputLabel htmlFor=\"component-simple\">Nombre:</InputLabel>\r\n                                    <Input \r\n                                        id=\"component-simple\"  \r\n                                        defaultValue={this.props.name} \r\n                                        onChange={this.props.setName}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormControl>\r\n                                    <InputLabel htmlFor=\"component-simple\">Año:</InputLabel>\r\n                                    <Input\r\n                                        id=\"component-simple\"  \r\n                                        defaultValue={this.props.year}\r\n                                        onChange={this.props.setYear}\r\n                                    />\r\n                                </FormControl>\r\n                            </form>\r\n                        </div>\r\n                        <Buttons\r\n                            b1={'Guardar'}\r\n                            name={this.name}\r\n                            year={this.year}\r\n                            status={this.status}\r\n                            onClick={this.props.saveValue}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Edit;","import React from 'react';\r\nimport Home from '../Home/index';\r\nimport Edit from '../Edit/index';\r\nimport swal from 'sweetalert';\r\n\r\nclass Index extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        var d = new Date();\r\n        this.state = {\r\n            name: \"Fausto Azzaretti\",\r\n            year: \"1995\",\r\n            status: true\r\n        };\r\n    }\r\n\r\n    changeScreen = () => {\r\n        this.setState({\r\n            status: this.state.status ? false : true\r\n        });\r\n    }\r\n\r\n    saveValues = () => {\r\n        this.state.name === \"\" || this.state.year === \"\" ? \r\n        swal ( \"Error\" ,  \"El nombre no debe estar vacio!\" ,  \"error\" ) :\r\n        this.setState({\r\n            name: this.state.name,\r\n            year: this.state.year,\r\n            status: this.state.status ? false : true\r\n        });\r\n        { console.log('Save Values:', this.state) }\r\n    }\r\n\r\n    setName = (e) => {\r\n        this.setState({\r\n            name: e.target.value,\r\n        })\r\n    }\r\n\r\n    setYear = (e) => {\r\n        this.setState({\r\n            year: e.target.value,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                { this.state.status ? \r\n                    <Home\r\n                        name={this.state.name}\r\n                        year={this.state.year}\r\n                        status={this.state.status}\r\n                        onClick={this.changeScreen}\r\n                        date={this.state.date}\r\n                /> : \r\n                    <Edit\r\n                        name={this.state.name}\r\n                        year={this.state.year}\r\n                        status={this.state.status}\r\n                        date={this.state.date}\r\n                        saveValue={this.saveValues}\r\n                        setName={this.setName}\r\n                        setYear={this.setYear}\r\n                        validate={this.validate}\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Index;","import './styles.css';\r\nimport React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\n\r\nclass Count extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        var d = new Date();\r\n        this.state = {\r\n            count: 1,\r\n            newDate: d.toLocaleString(),\r\n            date: props.date\r\n        };\r\n    }\r\n\r\n    decrement =() => {\r\n        console.log('decccc')\r\n        let newValue = this.state.count;\r\n        this.setState({\r\n            count: (newValue - 1),\r\n            newDate : this.state.newDate\r\n        });\r\n    }\r\n\r\n    increment = () => {\r\n        let newValue = this.state.count;\r\n        this.setState({\r\n            count: (newValue + 1),\r\n            newDate : this.state.newDate\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"containerCount\" >\r\n                <div className=\"textCount\">\r\n                    Contador Nro: {this.props.id}<br/>\r\n                    Creado: {this.props.date}<br/>\r\n                    Actualizado: {this.state.newDate}\r\n                </div>\r\n                <div className=\"buttonsCount\">\r\n                    <IconButton aria-label=\"delete\">\r\n                        <RemoveIcon \r\n                            onClick={this.decrement}\r\n                            style={{ fontSize: '50px' }} \r\n                        />\r\n                    </IconButton> \r\n                    <h1>{this.state.count}</h1>\r\n                    <IconButton aria-label=\"delete\">\r\n                        <AddIcon \r\n                            onClick={this.increment}\r\n                            style={{ fontSize: '50px' }} \r\n                        />\r\n                    </IconButton> \r\n                </div>\r\n                <IconButton aria-label=\"delete\"\r\n                    onClick={this.props.delete}\r\n                >\r\n                        <DeleteIcon/>\r\n                        Delete Count\r\n                </IconButton>\r\n            </div> \r\n        )       \r\n    }\r\n}\r\n\r\nexport default Count;","import './styles.css';\r\nimport React from 'react';\r\nimport Count from '../Count/index';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport NoteAddIcon from '@material-ui/icons/Save';\r\n\r\nclass ListCounts extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.countID = 0;\r\n        var d = new Date();\r\n        this.state = {\r\n            countsArray: [],\r\n            id: \"\",\r\n            name: props.name,\r\n            date: d.toLocaleString(),\r\n            number: 1\r\n        }\r\n    }\r\n\r\n    addCount = () => {\r\n        this.countID = this.countID + 1;\r\n        const copyCountsArray = Object.assign([], this.state.countsArray)\r\n        copyCountsArray.push({\r\n            id: this.countID\r\n        })\r\n        this.setState({\r\n            countsArray: copyCountsArray,\r\n            date: this.state.date\r\n        })\r\n        console.log(this.state.countsArray)\r\n    }\r\n\r\n    deleteCount = (index) => {\r\n        const copyCountsArray = Object.assign([], this.state.countsArray);\r\n        copyCountsArray.splice(index, 1);\r\n        this.setState({\r\n            countsArray: copyCountsArray\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"containerListCounts\">\r\n                <h1>Lista de Contadores{this.state.name}</h1>\r\n                <div className=\"topButtons\">\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        startIcon={<NoteAddIcon />}\r\n                        onClick={this.addCount}\r\n                    >\r\n                        Agregar Contador\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        startIcon={<SaveIcon />}\r\n                        \r\n                    >\r\n                        <Link to=\"/\">VOLVER AL INICIO</Link>\r\n                    </Button>\r\n                </div>\r\n                <div className=\"countsList\">\r\n                    {\r\n                        this.state.countsArray.map((count, index) => {\r\n                            return (\r\n                                <Count\r\n                                    key={count.id}\r\n                                    id={count.id}\r\n                                    delete={this.deleteCount.bind(this, index)}\r\n                                    date={this.state.date}\r\n                                />\r\n                            ) \r\n                        })\r\n                    }\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListCounts;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport Index from './screens/Index/index';\nimport ListCounts from './screens/ListCounts/index';\n\nconst App = () => (\n  <>\n    <Router>\n      <Redirect to=\"/\" component={Index} />\n      <Route path=\"/\" exact component={Index} />\n      <Route path=\"/counters\"><ListCounts /></Route>\n    </Router>\n  </>\n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './components/screens/Routes/index';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}